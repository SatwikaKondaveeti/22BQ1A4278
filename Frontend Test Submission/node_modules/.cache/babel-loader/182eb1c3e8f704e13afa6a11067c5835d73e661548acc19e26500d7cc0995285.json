{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport logger from '../logger';\nclass UrlService {\n  constructor() {\n    this.storageKey = 'url_shortener_data';\n    this.loadUrls();\n  }\n  loadUrls() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      this.urls = stored ? JSON.parse(stored) : [];\n      logger.info('URLs loaded from storage', {\n        count: this.urls.length\n      });\n    } catch (error) {\n      logger.error('Failed to load URLs from storage', {\n        error: error.message\n      });\n      this.urls = [];\n    }\n  }\n  saveUrls() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.urls));\n      logger.debug('URLs saved to storage', {\n        count: this.urls.length\n      });\n    } catch (error) {\n      logger.error('Failed to save URLs to storage', {\n        error: error.message\n      });\n    }\n  }\n  generateShortCode() {\n    // Generate a 6-character alphanumeric code\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  isShortCodeUnique(shortCode) {\n    return !this.urls.some(url => url.shortCode === shortCode);\n  }\n  validateUrl(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  validateShortCode(shortCode) {\n    // Alphanumeric, 3-20 characters\n    const regex = /^[a-zA-Z0-9]{3,20}$/;\n    return regex.test(shortCode);\n  }\n  createShortUrl(originalUrl, customShortCode = null, validityMinutes = 30) {\n    logger.info('Creating short URL', {\n      originalUrl,\n      customShortCode,\n      validityMinutes\n    });\n\n    // Validate original URL\n    if (!this.validateUrl(originalUrl)) {\n      logger.error('Invalid URL provided', {\n        originalUrl\n      });\n      throw new Error('Please enter a valid URL');\n    }\n\n    // Handle custom shortcode\n    let shortCode;\n    if (customShortCode) {\n      if (!this.validateShortCode(customShortCode)) {\n        logger.error('Invalid custom shortcode', {\n          customShortCode\n        });\n        throw new Error('Custom shortcode must be 3-20 characters long and contain only letters and numbers');\n      }\n      if (!this.isShortCodeUnique(customShortCode)) {\n        logger.error('Custom shortcode already exists', {\n          customShortCode\n        });\n        throw new Error('This custom shortcode is already in use. Please choose a different one.');\n      }\n      shortCode = customShortCode;\n    } else {\n      // Generate unique shortcode\n      do {\n        shortCode = this.generateShortCode();\n      } while (!this.isShortCodeUnique(shortCode));\n    }\n\n    // Calculate expiration time\n    const createdAt = new Date();\n    const expiresAt = new Date(createdAt.getTime() + validityMinutes * 60 * 1000);\n    const urlData = {\n      id: uuidv4(),\n      originalUrl,\n      shortCode,\n      createdAt: createdAt.toISOString(),\n      expiresAt: expiresAt.toISOString(),\n      validityMinutes,\n      accessCount: 0,\n      lastAccessed: null\n    };\n    this.urls.push(urlData);\n    this.saveUrls();\n    logger.logUrlShortened(originalUrl, shortCode, validityMinutes);\n    return urlData;\n  }\n  getUrlByShortCode(shortCode) {\n    const url = this.urls.find(u => u.shortCode === shortCode);\n    if (!url) {\n      logger.error('URL not found', {\n        shortCode\n      });\n      return null;\n    }\n\n    // Check if URL has expired\n    const now = new Date();\n    const expiresAt = new Date(url.expiresAt);\n    if (now > expiresAt) {\n      logger.logUrlExpired(shortCode, url.originalUrl);\n      return null;\n    }\n\n    // Update access statistics\n    url.accessCount++;\n    url.lastAccessed = now.toISOString();\n    this.saveUrls();\n    logger.logUrlAccessed(shortCode, url.originalUrl, true);\n    return url;\n  }\n  getAllUrls() {\n    const now = new Date();\n\n    // Filter out expired URLs\n    const activeUrls = this.urls.filter(url => {\n      const expiresAt = new Date(url.expiresAt);\n      return now <= expiresAt;\n    });\n\n    // Remove expired URLs from storage\n    if (activeUrls.length !== this.urls.length) {\n      this.urls = activeUrls;\n      this.saveUrls();\n      logger.info('Expired URLs cleaned up', {\n        removed: this.urls.length - activeUrls.length\n      });\n    }\n    return activeUrls.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  }\n  deleteUrl(id) {\n    const index = this.urls.findIndex(url => url.id === id);\n    if (index !== -1) {\n      const deletedUrl = this.urls[index];\n      this.urls.splice(index, 1);\n      this.saveUrls();\n      logger.info('URL deleted', {\n        id,\n        shortCode: deletedUrl.shortCode,\n        originalUrl: deletedUrl.originalUrl\n      });\n      return true;\n    }\n    return false;\n  }\n  getStatistics() {\n    const urls = this.getAllUrls();\n    const now = new Date();\n    const stats = {\n      totalUrls: urls.length,\n      totalClicks: urls.reduce((sum, url) => sum + url.accessCount, 0),\n      activeUrls: urls.filter(url => new Date(url.expiresAt) > now).length,\n      expiredUrls: this.urls.length - urls.length,\n      averageClicks: urls.length > 0 ? Math.round(urls.reduce((sum, url) => sum + url.accessCount, 0) / urls.length) : 0\n    };\n    logger.info('Statistics calculated', stats);\n    return stats;\n  }\n  getRecentUrls(limit = 10) {\n    return this.getAllUrls().slice(0, limit);\n  }\n  getMostClickedUrls(limit = 5) {\n    return this.getAllUrls().sort((a, b) => b.accessCount - a.accessCount).slice(0, limit);\n  }\n\n  // Export data for backup\n  exportData() {\n    const data = {\n      urls: this.urls,\n      exportedAt: new Date().toISOString(),\n      version: '1.0'\n    };\n    logger.info('Data exported', {\n      urlCount: this.urls.length\n    });\n    return JSON.stringify(data, null, 2);\n  }\n\n  // Import data from backup\n  importData(jsonData) {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.urls && Array.isArray(data.urls)) {\n        this.urls = data.urls;\n        this.saveUrls();\n        logger.info('Data imported successfully', {\n          urlCount: this.urls.length,\n          importedAt: data.exportedAt\n        });\n        return true;\n      }\n      throw new Error('Invalid data format');\n    } catch (error) {\n      logger.error('Failed to import data', {\n        error: error.message\n      });\n      return false;\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst urlService = new UrlService();\nexport default urlService;","map":{"version":3,"names":["v4","uuidv4","logger","UrlService","constructor","storageKey","loadUrls","stored","localStorage","getItem","urls","JSON","parse","info","count","length","error","message","saveUrls","setItem","stringify","debug","generateShortCode","chars","result","i","charAt","Math","floor","random","isShortCodeUnique","shortCode","some","url","validateUrl","URL","validateShortCode","regex","test","createShortUrl","originalUrl","customShortCode","validityMinutes","Error","createdAt","Date","expiresAt","getTime","urlData","id","toISOString","accessCount","lastAccessed","push","logUrlShortened","getUrlByShortCode","find","u","now","logUrlExpired","logUrlAccessed","getAllUrls","activeUrls","filter","removed","sort","a","b","deleteUrl","index","findIndex","deletedUrl","splice","getStatistics","stats","totalUrls","totalClicks","reduce","sum","expiredUrls","averageClicks","round","getRecentUrls","limit","slice","getMostClickedUrls","exportData","data","exportedAt","version","urlCount","importData","jsonData","Array","isArray","importedAt","urlService"],"sources":["C:/Users/satwi/22BQ1A4278/Frontend Test Submission/src/services/urlService.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport logger from '../logger';\r\n\r\nclass UrlService {\r\n  constructor() {\r\n    this.storageKey = 'url_shortener_data';\r\n    this.loadUrls();\r\n  }\r\n\r\n  loadUrls() {\r\n    try {\r\n      const stored = localStorage.getItem(this.storageKey);\r\n      this.urls = stored ? JSON.parse(stored) : [];\r\n      logger.info('URLs loaded from storage', { count: this.urls.length });\r\n    } catch (error) {\r\n      logger.error('Failed to load URLs from storage', { error: error.message });\r\n      this.urls = [];\r\n    }\r\n  }\r\n\r\n  saveUrls() {\r\n    try {\r\n      localStorage.setItem(this.storageKey, JSON.stringify(this.urls));\r\n      logger.debug('URLs saved to storage', { count: this.urls.length });\r\n    } catch (error) {\r\n      logger.error('Failed to save URLs to storage', { error: error.message });\r\n    }\r\n  }\r\n\r\n  generateShortCode() {\r\n    // Generate a 6-character alphanumeric code\r\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let result = '';\r\n    for (let i = 0; i < 6; i++) {\r\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  isShortCodeUnique(shortCode) {\r\n    return !this.urls.some(url => url.shortCode === shortCode);\r\n  }\r\n\r\n  validateUrl(url) {\r\n    try {\r\n      new URL(url);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  validateShortCode(shortCode) {\r\n    // Alphanumeric, 3-20 characters\r\n    const regex = /^[a-zA-Z0-9]{3,20}$/;\r\n    return regex.test(shortCode);\r\n  }\r\n\r\n  createShortUrl(originalUrl, customShortCode = null, validityMinutes = 30) {\r\n    logger.info('Creating short URL', { \r\n      originalUrl, \r\n      customShortCode, \r\n      validityMinutes \r\n    });\r\n\r\n    // Validate original URL\r\n    if (!this.validateUrl(originalUrl)) {\r\n      logger.error('Invalid URL provided', { originalUrl });\r\n      throw new Error('Please enter a valid URL');\r\n    }\r\n\r\n    // Handle custom shortcode\r\n    let shortCode;\r\n    if (customShortCode) {\r\n      if (!this.validateShortCode(customShortCode)) {\r\n        logger.error('Invalid custom shortcode', { customShortCode });\r\n        throw new Error('Custom shortcode must be 3-20 characters long and contain only letters and numbers');\r\n      }\r\n      \r\n      if (!this.isShortCodeUnique(customShortCode)) {\r\n        logger.error('Custom shortcode already exists', { customShortCode });\r\n        throw new Error('This custom shortcode is already in use. Please choose a different one.');\r\n      }\r\n      \r\n      shortCode = customShortCode;\r\n    } else {\r\n      // Generate unique shortcode\r\n      do {\r\n        shortCode = this.generateShortCode();\r\n      } while (!this.isShortCodeUnique(shortCode));\r\n    }\r\n\r\n    // Calculate expiration time\r\n    const createdAt = new Date();\r\n    const expiresAt = new Date(createdAt.getTime() + validityMinutes * 60 * 1000);\r\n\r\n    const urlData = {\r\n      id: uuidv4(),\r\n      originalUrl,\r\n      shortCode,\r\n      createdAt: createdAt.toISOString(),\r\n      expiresAt: expiresAt.toISOString(),\r\n      validityMinutes,\r\n      accessCount: 0,\r\n      lastAccessed: null\r\n    };\r\n\r\n    this.urls.push(urlData);\r\n    this.saveUrls();\r\n\r\n    logger.logUrlShortened(originalUrl, shortCode, validityMinutes);\r\n\r\n    return urlData;\r\n  }\r\n\r\n  getUrlByShortCode(shortCode) {\r\n    const url = this.urls.find(u => u.shortCode === shortCode);\r\n    \r\n    if (!url) {\r\n      logger.error('URL not found', { shortCode });\r\n      return null;\r\n    }\r\n\r\n    // Check if URL has expired\r\n    const now = new Date();\r\n    const expiresAt = new Date(url.expiresAt);\r\n    \r\n    if (now > expiresAt) {\r\n      logger.logUrlExpired(shortCode, url.originalUrl);\r\n      return null;\r\n    }\r\n\r\n    // Update access statistics\r\n    url.accessCount++;\r\n    url.lastAccessed = now.toISOString();\r\n    this.saveUrls();\r\n\r\n    logger.logUrlAccessed(shortCode, url.originalUrl, true);\r\n\r\n    return url;\r\n  }\r\n\r\n  getAllUrls() {\r\n    const now = new Date();\r\n    \r\n    // Filter out expired URLs\r\n    const activeUrls = this.urls.filter(url => {\r\n      const expiresAt = new Date(url.expiresAt);\r\n      return now <= expiresAt;\r\n    });\r\n\r\n    // Remove expired URLs from storage\r\n    if (activeUrls.length !== this.urls.length) {\r\n      this.urls = activeUrls;\r\n      this.saveUrls();\r\n      logger.info('Expired URLs cleaned up', { \r\n        removed: this.urls.length - activeUrls.length \r\n      });\r\n    }\r\n\r\n    return activeUrls.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n  }\r\n\r\n  deleteUrl(id) {\r\n    const index = this.urls.findIndex(url => url.id === id);\r\n    if (index !== -1) {\r\n      const deletedUrl = this.urls[index];\r\n      this.urls.splice(index, 1);\r\n      this.saveUrls();\r\n      \r\n      logger.info('URL deleted', { \r\n        id, \r\n        shortCode: deletedUrl.shortCode,\r\n        originalUrl: deletedUrl.originalUrl \r\n      });\r\n      \r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getStatistics() {\r\n    const urls = this.getAllUrls();\r\n    const now = new Date();\r\n    \r\n    const stats = {\r\n      totalUrls: urls.length,\r\n      totalClicks: urls.reduce((sum, url) => sum + url.accessCount, 0),\r\n      activeUrls: urls.filter(url => new Date(url.expiresAt) > now).length,\r\n      expiredUrls: this.urls.length - urls.length,\r\n      averageClicks: urls.length > 0 ? Math.round(urls.reduce((sum, url) => sum + url.accessCount, 0) / urls.length) : 0\r\n    };\r\n\r\n    logger.info('Statistics calculated', stats);\r\n    return stats;\r\n  }\r\n\r\n  getRecentUrls(limit = 10) {\r\n    return this.getAllUrls().slice(0, limit);\r\n  }\r\n\r\n  getMostClickedUrls(limit = 5) {\r\n    return this.getAllUrls()\r\n      .sort((a, b) => b.accessCount - a.accessCount)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  // Export data for backup\r\n  exportData() {\r\n    const data = {\r\n      urls: this.urls,\r\n      exportedAt: new Date().toISOString(),\r\n      version: '1.0'\r\n    };\r\n    \r\n    logger.info('Data exported', { urlCount: this.urls.length });\r\n    return JSON.stringify(data, null, 2);\r\n  }\r\n\r\n  // Import data from backup\r\n  importData(jsonData) {\r\n    try {\r\n      const data = JSON.parse(jsonData);\r\n      if (data.urls && Array.isArray(data.urls)) {\r\n        this.urls = data.urls;\r\n        this.saveUrls();\r\n        \r\n        logger.info('Data imported successfully', { \r\n          urlCount: this.urls.length,\r\n          importedAt: data.exportedAt \r\n        });\r\n        \r\n        return true;\r\n      }\r\n      throw new Error('Invalid data format');\r\n    } catch (error) {\r\n      logger.error('Failed to import data', { error: error.message });\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst urlService = new UrlService();\r\n\r\nexport default urlService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}